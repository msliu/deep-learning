1. Grpc and protobuf
   - How to install protobuf:
     http://blog.fudenglong.site/2017/11/17/%E5%9C%A8python3%E4%B8%AD%E4%BD%BF%E7%94%A8google%E7%9A%84protobuf/
   - How to install grpc:
     http://blog.fudenglong.site/2017/11/17/%E5%9C%A8python3%E4%B8%AD%E4%BD%BF%E7%94%A8google%E7%9A%84protobuf/
     安装gRPC，pip3 install grpcio
     安装gRPC，pip3 install grpcio-tools

   - gRPC tutorial
     https://github.com/daikeren/grpc_tutorial
     grpc code implementation among different language.
   - https://github.com/grpc/grpc

   - Shared memory for grpc client and server
     https://stackoverflow.com/questions/47550894/shared-memory-for-grpc-client-and-server

   - Apache Arrow 0.11.0 Release
     https://arrow.apache.org/blog/

   - Python bindings for Apache Arrow
     https://arrow.apache.org/docs/python/
     -- a cross-language development platform for in-memory data.
     -- command to create pyarrow for python3
        virtualenv -p python3 pyarrow
        Note: virtualenv pyarrow   -----> default create python 2.7
     -- https://arrow.apache.org/docs/python/development.html#developing-on-linux-and-macos

2. Apache Arrow
   Introduction to Apache Arrow
   https://beta.observablehq.com/@theneuralbit/introduction-to-apache-arrow

   Official github link
   https://github.com/apache/arrow

   https://arrow.apache.org/docs/python/ipc.html
   Streaming, Serialization, and IPC
   Memory and IO Interfaces
   https://arrow.apache.org/docs/python/memory.html#io
   pyarrow.plasma.PlasmaClient
   https://arrow.apache.org/docs/python/generated/pyarrow.plasma.PlasmaClient.html

3. ssl to send htps POST for certification.
   Official website: https://curl.haxx.se/

   Other relative info
   自簽署
   https://www.akadia.com/services/ssh_test_certificate.html
   自己建一個ca來簽署
   https://engineering.circle.com/https-authorized-certs-with-node-js-315e548354a2
   講解ssl
   https://www.netadmin.com.tw/article_content.aspx?sn=1106140008
   ubuntu add crt to trusted
   https://askubuntu.com/questions/645818/how-to-install-certificates-for-command-line

   My example c++ code in client side.
   cmd : curl  --header "Content-Type: application/json" --request POST   --data '{"mac":"xx:xx:xx:xx:xx:xx","key":"bbb"}' https://192.x.x.x:3254/ping --insecure

   CMakeLists.txt adds
     target_link_libraries(${PROJECT_NAME} -lssl -lcrypto -lcurl)

   main.cpp
     #include <string.h>
     #include <curl/curl.h>

     CURL *curl;
     CURLcode res;

     char szJsonData[128];
     memset(szJsonData, 0, sizeof(szJsonData));
     string strJson = "{";
     strJson += "\"mac\":\"xx:xx:xx:xx:xx:xx\",";
     strJson += "\"key\":\"bbb\"";
     strJson += "}";
     strcpy(szJsonData, strJson.c_str());

     cout << " string =  " << szJsonData << endl;
     curl_global_init(CURL_GLOBAL_DEFAULT);
     curl = curl_easy_init();

     if (curl) {
       // curl_easy_setopt(curl, CURLOPT_URL, "https://localhost:3254/ping");   // run for localHost
       curl_easy_setopt(curl, CURLOPT_URL, "https://192.x.x.x:3254/ping");
       curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, "POST");

       curl_slist *plist = curl_slist_append(NULL, "Content-Type: application/json");
       curl_easy_setopt(curl, CURLOPT_HTTPHEADER, plist);

       curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0L);
       curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0L);

       curl_easy_setopt(curl, CURLOPT_POSTFIELDS, szJsonData);
       res = curl_easy_perform(curl);
     }
