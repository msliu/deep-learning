0. CNN
   0.1 Bilinear CNNs for Fine-grained Visual Recognition
       http://vis-www.cs.umass.edu/bcnn/

1. Loss Function
   Introduction to Loss Functions
   https://blog.algorithmia.com/introduction-to-loss-functions/

   Current data loss function used in CNN listed below:
   Euclidean loss, (square) hinge loss, information gain loss, contrastive loss, triplet loss, Softmax loss

   Def: We define the softmax loss as the combination of 
        A). a cross-entropy loss,
        B). a softmax function and
        C). the last fully connected layer

   1.1 Softmax, Softmax Loss, Large-Margin Softmax Loss
       Gated Softmax Classification
           http://www-oldurls.inf.ethz.ch/personal/marc.pollefeys/pubs/MemisevicNIPS10.pdf
       Large-Margin Softmax Loss for Convolutional Neural Networks
           http://proceedings.mlr.press/v48/liud16.pdf

2. Face Recognition
   The top 7 trends for facial recognition in 2018
   https://www.gemalto.com/govt/biometrics/facial-recognition

   2.1 SphereFace: Deep Hypersphere Embedding for Face Recognition
        https://arxiv.org/abs/1704.08063

   2.2 CosFace: Large Margin Cosine Loss for Deep Face Recognition
       https://arxiv.org/abs/1801.09414

3. Blur detection
   Example code for blur detection

      Mat blurOutput;
      int kernel_size = 3;
      int scale = 1;
      int delta = 0;
      int ddepth = CV_16S;
      // Mat blurImage;

      // keep clur() to do test
      // blur(aColorInputImage, blurImage, Size(2,2)); // [Note]
      Laplacian( aColorInputImage, blurOutput, ddepth, kernel_size, scale, delta, BORDER_DEFAULT );
      // aOutputImage = blurImage;
      Scalar mean, stddev; //0:1st channel, 1:2nd channel and 2:3rd channel
      meanStdDev(blurOutput, mean, stddev, Mat());
      if (aReturnBlurResultData) {
        *aReturnBlurResultData = stddev.val[0] * stddev.val[0];
      }

      [Note] parameter in blur() for blur test
            Size(10,10)
            E/RobotVision:  blur det in java = 28.740300915075235. // *aReturnBlurResultData = stddev.val[0] * stddev.val[0];

            Size(8,8)
            E/RobotVision:  blur det in java = 47.134004381939086

            Size(6,6)
            E/RobotVision:  blur det in java = 88.9029381939086

            Size(4,4)
            E/RobotVision:  blur det in java = 259.99400986659674

            Size(2,2) should be ok as a threshold.
            E/RobotVision:  blur det in java = 1095.1174236831475

            threadhold set to 1500

            Size(0,0)
            E/RobotVision:  blur det in java = 3228.5143919595594

4. A Survey on Multi-Task Learning
   https://arxiv.org/pdf/1707.08114.pdf





=======================  self study
1. Image Segmentation
   1.1 Traditional way
       Image Segmentation with Watershed Algorithm
       https://docs.opencv.org/3.4/d3/db4/tutorial_py_watershed.html

   1.2 deep learning way
       Semantic Segmentation using deep learning
       https://medium.com/nanonets/how-to-do-image-segmentation-using-deep-learning-c673cc5862ef



